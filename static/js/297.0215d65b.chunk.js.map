{"version":3,"file":"static/js/297.0215d65b.chunk.js","mappings":"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","sources":["components/ErrorMessage/ErrorMessage.js","components/appBanner/AppBanner.js","components/pages/SingleCharacterLayout.js","services/MarvelService.js","hooks/http.hooks.js"],"sourcesContent":["import img from \"./error.gif\";\n\nconst ErrorMessage = () => {\n  return (\n    <img\n      style={{\n        display: \"block\",\n        width: \"250px\",\n        height: \"250px\",\n        objectFit: \"contain\",\n        margin: \"0 auto\",\n      }}\n      src={img}\n      alt=\"error\"\n    />\n  );\n};\nexport default ErrorMessage;\n","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import \"./singleCharacterLayout.scss\";\nimport { useParams, Link } from \"react-router-dom\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport { useState, useEffect } from \"react\";\nimport ErrorMessage from \"../ErrorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\nimport AppBanner from \"../appBanner/AppBanner\";\nimport Helmet from \"react-helmet\";\n\nconst SingleCharacterLayout = () => {\n  const characterId = useParams();\n  const [char, setChar] = useState(null);\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n  const charId = characterId.characterId;\n\n  useEffect(() => {\n    updateChar();\n    // eslint-disable-next-line\n  }, []);\n\n  const updateChar = () => {\n    clearError();\n    getCharacter(charId).then(onCharLoaded);\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return (\n    <>\n      {<AppBanner />}\n      {errorMessage}\n      {spinner}\n      {content}\n    </>\n  );\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail } = char;\n\n  return (\n    <div className=\"single-comic\">\n      <Helmet>\n        <meta name=\"description\" content={`Page about char ${name}`} />\n        <title>{name}</title>\n      </Helmet>\n      <img src={thumbnail} alt={name} className=\"single-comic__char-img\" />\n      <div className=\"single-comic__info\">\n        <h2 className=\"single-comic__name\">{name}</h2>\n        <p className=\"single-comic__descr\">{description}</p>\n      </div>\n      <Link to=\"/\" className=\"single-characters__back\">\n        Back to all\n      </Link>\n    </div>\n  );\n};\n\nexport default SingleCharacterLayout;\n","import { useHttp } from \"../hooks/http.hooks\";\n\nconst useMarvelService = () => {\n  const { loading, request, error, clearError } = useHttp();\n  const _basis = \"https://gateway.marvel.com:443/v1/public/characters\";\n  const _apiKey = \"apikey=7aee92fdbe4f8e13d3e13670a06c2326\";\n  const _basisComics = \"https://gateway.marvel.com:443/v1/public/comics\";\n\n  const _offset = 210;\n\n  const getAllCharacters = async (offset = _offset) => {\n    const res = await request(`${_basis}?limit=9&offset=${offset}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async (id) => {\n    const res = await request(`${_basis}/${id}?&${_apiKey}`);\n\n    return _transformCharacter(res.data.results[0]);\n  };\n\n  const getAllComics = async (offset = _offset) => {\n    const res = await request(\n      `${_basisComics}?limit=8&offset=${offset}&${_apiKey}`\n    );\n\n    return res.data.results.map(_transformComics);\n  };\n\n  const getSingleComic = async (id) => {\n    const res = await request(`${_basisComics}/${id}?${_apiKey}`);\n\n    return _transformComics(res.data.results[0]);\n  };\n\n  const getCharByName = async (name) => {\n    const res = await request(`${_basis}?name=${name}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const _transformComics = (comics) => {\n    return {\n      id: comics.id,\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n      issueNumber: comics.issueNumber,\n      title: comics.title,\n      price: comics.prices[0].price,\n      url: comics.urls[0].url,\n      description: comics.description || \"There is not description\",\n      pageCount: comics.pageCount\n        ? `${comics.pageCount} p.`\n        : \"No information about the number of pages\",\n      language: comics.textObjects.language || \"en-us\",\n    };\n  };\n\n  const _transformCharacter = (char) => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: char.description\n        ? `${char.description.slice(0, 210)}...`\n        : \"There is no description for this character\",\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items,\n    };\n  };\n\n  return {\n    loading,\n    error,\n    getAllCharacters,\n    getCharacter,\n    clearError,\n    getAllComics,\n    getSingleComic,\n    getCharByName,\n  };\n};\nexport default useMarvelService;\n","import { useCallback, useState } from \"react\";\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const request = useCallback(\n    async (\n      url,\n      method = \"GET\",\n      body = null,\n      headers = { \"Content-Type\": \"application/json\" }\n    ) => {\n      setLoading(true);\n\n      try {\n        const response = await fetch(url, { method, body, headers });\n\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url} status:${response.status}`);\n        }\n\n        const data = response.json();\n\n        setLoading(false);\n        return data;\n      } catch (e) {\n        setLoading(true);\n        setError(e.message);\n        throw e;\n      }\n    },\n    []\n  );\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n  return { loading, request, error, clearError };\n};\n"],"names":["style","display","width","height","objectFit","margin","src","img","alt","className","avengers","avengersLogo","View","char","name","description","thumbnail","Helmet","content","to","characterId","useParams","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","charId","useEffect","updateChar","then","onCharLoaded","errorMessage","ErrorMessage","spinner","Spinner","AppBanner","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","data","json","message","useHttp","_basis","_apiKey","_basisComics","_offset","getAllCharacters","offset","res","results","map","_transformCharacter","id","getAllComics","_transformComics","getSingleComic","getCharByName","comics","path","extension","issueNumber","title","price","prices","urls","pageCount","language","textObjects","slice","homepage","wiki","items"],"sourceRoot":""}