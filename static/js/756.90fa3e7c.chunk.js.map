{"version":3,"file":"static/js/756.90fa3e7c.chunk.js","mappings":"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","sources":["components/ErrorMessage/ErrorMessage.js","components/appBanner/AppBanner.js","components/pages/SingleComicPage.js","services/MarvelService.js","hooks/http.hooks.js"],"sourcesContent":["import img from \"./error.gif\";\n\nconst ErrorMessage = () => {\n  return (\n    <img\n      style={{\n        display: \"block\",\n        width: \"250px\",\n        height: \"250px\",\n        objectFit: \"contain\",\n        margin: \"0 auto\",\n      }}\n      src={img}\n      alt=\"error\"\n    />\n  );\n};\nexport default ErrorMessage;\n","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import \"./singleComicsPage.scss\";\nimport Spinner from \"../spinner/Spinner\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport { useState, useEffect } from \"react\";\nimport ErrorMessage from \"../ErrorMessage/ErrorMessage\";\nimport { useParams, Link } from \"react-router-dom\";\nimport AppBanner from \"../appBanner/AppBanner\";\nimport Helmet from \"react-helmet\";\n\nconst SingleComicPage = () => {\n  const { comicId } = useParams();\n  const [comic, setComic] = useState(null);\n  const { loading, error, getSingleComic, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateComic();\n    // eslint-disable-next-line\n  }, [comicId]);\n\n  const updateComic = () => {\n    clearError();\n    getSingleComic(comicId).then(onComicLoaded);\n  };\n\n  const onComicLoaded = (comic) => {\n    setComic(comic);\n  };\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !comic) ? <View comic={comic} /> : null;\n\n  return (\n    <>\n      {<AppBanner />}\n      {errorMessage}\n      {spinner}\n      {content}\n    </>\n  );\n};\n\nconst View = ({ comic }) => {\n  const { title, description, pageCount, thumbnail, language, price } = comic;\n\n  return (\n    <div className=\"single-comic\">\n      <Helmet>\n        <meta name=\"description\" content={`Page about comic ${title}`} />\n        <title>{title}</title>\n      </Helmet>\n      <img src={thumbnail} alt={title} className=\"single-comic__img\" />\n      <div className=\"single-comic__info\">\n        <h2 className=\"single-comic__name\">{title}</h2>\n        <p className=\"single-comic__descr\">{description}</p>\n        <p className=\"single-comic__descr\">{pageCount}</p>\n        <p className=\"single-comic__descr\">Language: {language}</p>\n        <div className=\"single-comic__price\">{price}</div>\n      </div>\n      <Link to=\"/comics\" className=\"single-comic__back\">\n        Back to all\n      </Link>\n    </div>\n  );\n};\n\nexport default SingleComicPage;\n","import { useHttp } from \"../hooks/http.hooks\";\n\nconst useMarvelService = () => {\n  const { loading, request, error, clearError } = useHttp();\n  const _basis = \"https://gateway.marvel.com:443/v1/public/characters\";\n  const _apiKey = \"apikey=7aee92fdbe4f8e13d3e13670a06c2326\";\n  const _basisComics = \"https://gateway.marvel.com:443/v1/public/comics\";\n\n  const _offset = 210;\n\n  const getAllCharacters = async (offset = _offset) => {\n    const res = await request(`${_basis}?limit=9&offset=${offset}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async (id) => {\n    const res = await request(`${_basis}/${id}?&${_apiKey}`);\n\n    return _transformCharacter(res.data.results[0]);\n  };\n\n  const getAllComics = async (offset = _offset) => {\n    const res = await request(\n      `${_basisComics}?limit=8&offset=${offset}&${_apiKey}`\n    );\n\n    return res.data.results.map(_transformComics);\n  };\n\n  const getSingleComic = async (id) => {\n    const res = await request(`${_basisComics}/${id}?${_apiKey}`);\n\n    return _transformComics(res.data.results[0]);\n  };\n\n  const getCharByName = async (name) => {\n    const res = await request(`${_basis}?name=${name}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const _transformComics = (comics) => {\n    return {\n      id: comics.id,\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n      issueNumber: comics.issueNumber,\n      title: comics.title,\n      price: comics.prices[0].price,\n      url: comics.urls[0].url,\n      description: comics.description || \"There is not description\",\n      pageCount: comics.pageCount\n        ? `${comics.pageCount} p.`\n        : \"No information about the number of pages\",\n      language: comics.textObjects.language || \"en-us\",\n    };\n  };\n\n  const _transformCharacter = (char) => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: char.description\n        ? `${char.description.slice(0, 210)}...`\n        : \"There is no description for this character\",\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items,\n    };\n  };\n\n  return {\n    loading,\n    error,\n    getAllCharacters,\n    getCharacter,\n    clearError,\n    getAllComics,\n    getSingleComic,\n    getCharByName,\n  };\n};\nexport default useMarvelService;\n","import { useCallback, useState } from \"react\";\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const request = useCallback(\n    async (\n      url,\n      method = \"GET\",\n      body = null,\n      headers = { \"Content-Type\": \"application/json\" }\n    ) => {\n      setLoading(true);\n\n      try {\n        const response = await fetch(url, { method, body, headers });\n\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url} status:${response.status}`);\n        }\n\n        const data = response.json();\n\n        setLoading(false);\n        return data;\n      } catch (e) {\n        setLoading(true);\n        setError(e.message);\n        throw e;\n      }\n    },\n    []\n  );\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n  return { loading, request, error, clearError };\n};\n"],"names":["style","display","width","height","objectFit","margin","src","img","alt","className","avengers","avengersLogo","View","comic","title","description","pageCount","thumbnail","language","price","Helmet","name","content","to","comicId","useParams","useState","setComic","useMarvelService","loading","error","getSingleComic","clearError","useEffect","updateComic","then","onComicLoaded","errorMessage","ErrorMessage","spinner","Spinner","AppBanner","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","data","json","message","useHttp","_basis","_apiKey","_basisComics","_offset","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getCharByName","comics","path","extension","issueNumber","prices","urls","textObjects","char","slice","homepage","wiki","items"],"sourceRoot":""}